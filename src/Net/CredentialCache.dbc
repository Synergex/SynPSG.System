;;**********************************************************************
;;
;; Title:       CredentialCache.dbc
;;
;; Type:        Class
;;
;; Description:
;;
;; Author:      William Hawkins, Synergex Professional Services Group
;;
;; Copyright    © 2011 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************

import System.Collections

namespace SynPSG.System

class CredentialCache ;;implements ICredentials, ICredentialsByHost, IEnumerable

    class CredentialInfo

        public UriObj               ,@Uri
        public HostName             ,string
        public Port                 ,int
        public AuthenticationType   ,string
        public NetworkCredentialObj ,@NetworkCredential

        public method CredentialInfo
            uriObj                  ,@Uri
            authenticationType      ,string
            networkCredentialObj    ,@NetworkCredential
            endparams
        proc
            this.uriObj = uriObj
            this.HostName = ''
            this.Port = 0
            this.AuthenticationType = authenticationType
            this.NetworkCredentialObj = networkCredentialObj
        endmethod

        public method CredentialInfo
            aHost                   ,string
            aPort                   ,int
            authenticationType      ,string
            networkCredentialObj    ,@NetworkCredential
            endparams
        proc
            this.UriObj = ^NULL
            this.HostName = aHost
            this.Port = aPort
            this.authenticationType = authenticationType
            this.networkCredentialObj = networkCredentialObj
        endmethod
    endclass

    private arrayListObj    ,@ArrayList

    ;;;<summary>
    ;;; default application credentials
    ;;;</summary>
    public property DefaultCredentials  ,@NetworkCredential
        method get
        proc
            mreturn ^null
        endmethod
    endproperty

    ;;;<summary>
    ;;; default user credentials
    ;;;</summary>
    public property DefaultNetworkCredentials    ,@NetworkCredential
        method get
        proc
            ;; return current users : username / password / domain
            mreturn ^null ;;new NetworkCredential('','','')
        endmethod
    endproperty


    public method CredentialCache
        endparams
    proc
        arrayListObj = new ArrayList()
    endmethod

    public method Add       ,void
        uriObj              ,@Uri
        authenticationType          ,string
        credential          ,@NetworkCredential
        endparams
    proc
        ;; Add a 'CredentialInfo' object into a list.
        arrayListObj.Add(new CredentialInfo(uriObj, authenticationType, credential))
    endmethod

    public method Add               ,void
        aHost                       ,string
        aPort                       ,int
        authenticationType          ,string
        credential                  ,@NetworkCredential
        endparams
    proc
        ;; Add a 'CredentialInfo' object into a list.
        arrayListObj.Add(new CredentialInfo(aHost, aPort, authenticationType, credential))
    endmethod

    ;; Remove the 'CredentialInfo' object from the list that matches to the given 'Uri' and 'AuthenticationType'
    public method Remove    ,void
        uriObj              ,@Uri
        authenticationType  ,string
        endparams
    proc
        begin
            data index      ,int
            for index from 0 thru arrayListObj.Count - 1
            begin
                data credentialInfo, @CredentialInfo, (@CredentialInfo)arrayListObj[index]
                if (credentialInfo.uriObj == ^null)
                    nextloop
                if (uriObj.Equals(credentialInfo.uriObj) &&
                &   authenticationType.Equals(credentialInfo.authenticationType))
                    arrayListObj.RemoveAt(index)
            end
        end
    endmethod

    ;; Remove the 'CredentialInfo' object from the list that matches to the given 'Uri' and 'AuthenticationType'
    public method Remove            ,void
        aHost                       ,string
        aPort                       ,int
        authenticationType          ,string
        endparams
    proc
        begin
            data index      ,int
            for index from 0 thru arrayListObj.Count - 1
            begin
;                data credentialInfo, @CredentialInfo, (@CredentialInfo)arrayListObj[index]
;                if (credentialInfoObj.HostName == '' || credentialInfoObj.Port < 1)
;                    nextloop
;                if (aHost == credentialInfoObj.HostName &&
;                &   aPort == credentialInfoObj.Port &&
;                &   authenticationType.Equals(credentialInfo.AuthenticationType))
;                    arrayListObj.RemoveAt(index)
            end
        end
    endmethod

    public method GetCredential ,@NetworkCredential
        uriObj                  ,@Uri
        authenticationType      ,string
        endparams
    proc
        begin
            data index, int
            for index from 0 thru arrayListObj.Count - 1
            begin
                data credentialInfoObj, @CredentialInfo, (@CredentialInfo)arrayListObj[index]
                if (credentialInfoObj.uriObj == ^null)
                    nextloop
                if (uriObj.Equals(credentialInfoObj.uriObj) &&
                &   authenticationType.Equals(credentialInfoObj.authenticationType))
                    mreturn credentialInfoObj.networkCredentialObj
            end
        end
        mreturn ^null
    endmethod

    public method GetCredential     ,@NetworkCredential
        aHost                       ,string
        aPort                       ,int
        authenticationType          ,string             ;; IAuthenticationModule.AuthenticationType (e.g. "Basic")
        endparams
    proc
        begin
            data index  ,int
            for index from 0 thru arrayListObj.Count - 1
            begin
                data credentialInfoObj, @CredentialInfo, (@CredentialInfo)arrayListObj[index]
                if (credentialInfoObj.hostName == '' || credentialInfoObj.port < 1)
                    nextloop

                if (aHost == credentialInfoObj.hostName &&
                &   aPort == credentialInfoObj.port &&
                &   authenticationType.Equals(credentialInfoObj.authenticationType))
                    mreturn credentialInfoObj.networkCredentialObj
            end
        end
        mreturn ^null
    endmethod

endclass

endnamespace

