;;**********************************************************************
;;
;; Title:       SmtpClient.dbc
;;
;; Type:        Class
;;
;; Description:
;;
;; Author:      Tod Phillips, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
import SynPSG.System
import SynPSG.System.IO
import SynPSG.System.Net
import SynPSG.System.Net.Mail
import SynPSG.System.Net.Mime
import SynPSG.System.Net.Sockets
import SynPSG.System.Text.encoding

.include "DBLDIR:synsock.def"

.define CRLF    %char(13)+%char(10)
.define CR      %char(13)
.define LF      %char(10)

namespace SynPSG.System.Net.Mail

    public class SmtpClient
        private mHost      ,string
        private mPort      ,integer
        private mRespCode  ,integer
        private mRespContinuation  ,boolean
        private mRespStr   ,string
        private mByte      ,i1
        private mErrMsg    ,string
        private mTcpClient ,@TcpClient
        private mNStream   ,@NetworkStream
        private mCredentials,@NetworkCredential

        ;;;<summary>
        ;;;Initializes a new instance of the SmtpClient class that sends e-mail by using the specified SMTP server.
        ;;;</summary>
        public method SmtpClient
            in host     ,string
        proc
            if (host.length == 0) then
                mHost = "localhost"
            else
                mHost = host
            mPort = 25
        endmethod

        ;;;<summary>
        ;;;Initializes a new instance of the SmtpClient class that sends e-mail by using the specified SMTP server and port.
        ;;;</summary>
        public method SmtpClient
            in host     ,string
            in port     ,integer
        proc
            if (host.length == 0) then
                mHost = "localhost"
            else
                mHost = host
            if (port <= 0) then
                mPort = 25
            else
                mPort = port
        endmethod

        ;;;<summary>
        ;;;</summary>
        public property Host, string
            method get
            proc
                mreturn mHost
            endmethod
            method set
            proc
                mHost = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;</summary>
        public property Port, integer
            method get
            proc
                mreturn mPort
            endmethod
            method set
            proc
                mPort = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;</summary>
        public property Credentials ,@NetworkCredential
            method get
            proc
                mreturn mCredentials
            endmethod
            method set
            proc
                mCredentials = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Sends an e-mail message to an SMTP server for delivery using the supplied MailMessage object.
        ;;;</summary>
        public method Send  ,void
            in message      ,@MailMessage
            endparams

        structure block
                            ,a32768
        endstructure

        record
            ESMTPinUse      ,boolean        ;; ESMTP in use
            ctr             ,i4             ;; general purpose loop counter
            group dt
                year        ,a4
                month       ,d2
                day         ,a2
                hour        ,a2
                minute      ,a2
                seconds     ,a2
                milli       ,a6
            endgroup
            m_data          ,a500*57        ;; SMTP message lines (57 bytes before conversion to Base64, 76 bytes + CRLF after conversion)
            m_data_len      ,i4             ;; number of characters in m_data
            minsOffset      ,i4             ;; timezone offset (in minutes)
            UMToffset       ,a5             ;; string representation of timezone offset
        endrecord
        record
            buff            ,string
            m_senderHost    ,string
            m_senderAddress ,string
            m_tempAddress   ,@MailAddress
        endrecord

        proc

            if (message.From.Address == "")
                throw new applicationexception("No 'from' address provided.")
            if (message.To.Count == 0)
                throw new applicationexception("No 'to' addresses specified.")

            if (message.Sender!=^null && message.Sender.Address.Length>0 && message.Sender.Address!=message.From.Address) then
            begin
                m_senderHost = message.Sender.Host
                m_senderAddress = message.Sender.Address
            end
            else
            begin
                m_senderHost = message.From.Host
                m_senderAddress = message.From.Address
            end

            mTcpClient = new TcpClient(mHost, mPort)
            mNStream = mTcpClient.GetStream()

            ;;Get initial response from the server. Set the timeout to 30 seconds
            mNStream.ReadTimeout = 30000

            begin
                data tempBuf    ,a1024
                ;;getSmtpLine()
                if (mNStream.Read(tempBuf,0,^size(tempBuf)))
                begin
                    mRespCode = %integer(tempBuf(1:3))
                    mRespContinuation = false
                    mRespStr = tempBuf(5,^size(tempBuf))
                end
                CheckResponseCode(220)
            end

            ;;Service is available, now tell the server the sender's domain
            ;; NOTE: If "ESMTP" was in the 220 response, then the server should support EHLO
            mRespStr = mRespStr.ToUpper()

            if (mRespStr.Contains('ESMTP')) then
                ESMTPinUse = true
            else
                ESMTPinUse = false

            if(ESMTPinUse == true) then
                buff = "EHLO "+m_senderHost+CRLF
            else
                buff = "HELO "+m_senderHost+CRLF
            mNStream.Write(buff,0,buff.Length)

            getSmtpLine()
            CheckResponseCode(220)

            ;; get additional responses after logon
            while(mRespContinuation==true)
            begin
                getSmtpLine()
                CheckResponseCode(250)
            end

            if(mRespStr.StartsWith('TLS '))
            begin
                buff = 'STARTTLS TLS1.0'+CRLF
                mNStream.Write(buff,0,buff.Length)

                getSmtpLine()
                CheckResponseCode(220)

                buff = "EHLO "+m_senderHost+CRLF
                mNStream.Write(buff,0,buff.Length)

                getSmtpLine()
                CheckResponseCode(220)

                ;; get additional responses after logon
                while(mRespContinuation==true)
                begin
                    getSmtpLine()
                    CheckResponseCode(250)
                end
            end

            if(mRespStr.StartsWith('AUTH '))
            begin
                ;; performed authentication
                data authenticated ,boolean ,false

                if (mRespStr.Contains(' LOGON '))
                begin
                    buff = 'AUTH LOGIN'+CRLF
                    mNStream.Write(buff,0,buff.Length)

                    ;; get username prompt
                    getSmtpLine()
                    checkResponseCode(334)

                    ;; base64 encrypted username
                    buff = Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Username),SynPSG.Base64FormattingOptions.None)+CRLF
                    mNStream.Write(buff,0,buff.Length)

                    ;; get password prompt
                    getSmtpLine()
                    checkResponseCode(334)

                    ;; base64 encrypted password
                    buff = Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Password),SynPSG.Base64FormattingOptions.None)+CRLF
                    mNStream.Write(buff,0,buff.Length)

                    authenticated = true
                end

                if (authenticated == false && mRespStr.Contains(' PLAIN '))
                begin
                    buff = 'AUTH PLAIN'+CRLF
                    mNStream.Write(buff,0,buff.Length)

                    ;; get empty response
                    getSmtpLine()
                    checkResponseCode(334)

                    ;base64 encrypted simple username
                    buff = Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Username),SynPSG.Base64FormattingOptions.None)+CRLF
                    mNStream.Write(buff,0,buff.Length)

                    authenticated = true
                end

                if (authenticated == false && mRespStr.Contains(' CRAM-MD5 '))
                begin
                    ;; todo
                end

                if (authenticated == false && mRespStr.Contains(' DIGEST-MD5 '))
                begin

                end

                if (authenticated == false && mRespStr.Contains(' GSSAPI '))
                begin

                end

                if(authenticated == false)
                    throw new ApplicationException("Unknown Authentication Request:"+mRespStr)

                ;; get authorization response
                getSmtpLine()
                checkResponseCode(235)
            end

            ;;Tell the server about the sender
            buff = "MAIL FROM:<"+m_senderAddress+">"+CRLF
            mNStream.Write(buff,0,buff.Length)
            getSmtpLine()
            checkResponseCode(0)

            ;;Send recipient list
            for ctr from 1 thru message.To.Count
            begin
                buff = "RCPT TO:<"+message.To[ctr-1].Address+">"+CRLF
                mNStream.Write(buff,0,buff.Length)
                getSmtpLine()
                checkResponseCode(0)
            end

            ;;Send cc list
            for ctr from 1 thru message.CC.Count
            begin
                buff = "RCPT TO:<"+message.CC[ctr-1].Address+">"+CRLF
                mNStream.Write(buff,0,buff.Length)
                getSmtpLine()
                checkResponseCode(0)
            end

            ;;Now send DATA command
            mNStream.Write("DATA"+CRLF,0,6)
            getSmtpLine()
            checkResponseCode(354)

            ;;Send message header
            buff = "X-Mailer: Synergy DBL"+CRLF
            mNStream.Write(buff,0,buff.Length)

            buff = SynPSG.StringUtil.Format("Date: {0:ddd dd MMM yyyy HH:mm:ss zzz}", %datetime)+CRLF
            mNStream.Write(buff,0,buff.Length)

            ;;Sender
            if (message.From.DisplayName) then
                buff = 'From: "'+message.From.DisplayName+'" <'+message.From.Address+'>'+CRLF
            else
                buff = "From: "+message.From.Address+CRLF
            mNStream.Write(buff,0,buff.Length)

            ;;Recipient
            buff = "To:"
            for ctr from 1 thru message.To.Count
            begin
                if (ctr>1)
                    buff = String.Concat(buff, ',')
                if (message.To[ctr-1].DisplayName) then
                    buff = String.Concat(buff, ' "'+message.To[ctr-1].DisplayName+'" <'+message.To[ctr-1].Address+'>')
                else
                    buff = String.Concat(buff, ' '+message.To[ctr-1].Address)
            end
            buff = String.Concat(buff, CRLF)
            mNStream.Write(buff,0,buff.Length)

            ;;CC:
            if (message.CC.Count>0)
            begin
                buff = "Cc:"
                for ctr from 1 thru message.CC.Count
                begin
                    if (ctr>1)
                        buff = String.Concat(buff, ',')
                    if (message.CC[ctr-1].DisplayName) then
                        buff = String.Concat(buff, ' "'+message.CC[ctr-1].DisplayName+'" <'+message.CC[ctr-1].Address+'>')
                    else
                        buff = String.Concat(buff, " "+message.CC[ctr-1].Address)
                end
                buff = String.Concat(buff, CRLF)
                mNStream.Write(buff,0,buff.Length)
            end

            ;;BCC:
            if (message.Bcc.Count>0)
            begin
                buff = "Bcc:"
                for ctr from 1 thru message.Bcc.Count
                begin
                    if (ctr>1)
                        buff = String.Concat(buff, ',')
                    if (message.Bcc[ctr-1].DisplayName) then
                        buff = String.Concat(buff, ' "'+message.Bcc[ctr-1].DisplayName+'" <'+message.Bcc[ctr-1].Address+'>')
                    else
                        buff = String.Concat(buff, " "+message.Bcc[ctr-1].Address)
                end
                buff = String.Concat(buff, CRLF)
                mNStream.Write(buff,0,buff.Length)
            end

            ;;Reply to
            if (message.ReplyTo!=^null)
            begin
                if (message.ReplyTo.DisplayName.Length>0) then
                    buff = 'Reply-To: "'+message.ReplyTo.DisplayName+'" <'+message.ReplyTo.Address+'>'+CRLF
                else
                    buff = "Reply-To: "+message.ReplyTo.Address+CRLF
                mNStream.Write(buff,0,buff.Length)
            end

            ;;Subject
            buff = "Subject: "+message.Subject+CRLF
            mNStream.Write(buff,0,buff.Length)

            ;;Content MIME headers
            buff = "Mime-Version: 1.0"+CRLF
            mNStream.Write(buff,0,buff.Length)
            if (message.Attachments.Count>0) then
                buff = 'Content-Type: multipart/mixed; boundary="_NextPart_'+%hex(%jbno)+'"'+CRLF
            else
                if (message.IsBodyHtml) then
                    buff = 'Content-Type: text/html; charset="iso-8859-1"'+CRLF
                else
                    buff = 'Content-Type: text/plain; charset="iso-8859-1"'+CRLF
            mNStream.Write(buff,0,buff.Length)

            ;;Attachments
            if (message.Attachments.Count>0)
            begin
                mNStream.Write(CRLF,0,2)
                buff = '--_NextPart_'+%hex(%jbno)+CRLF
                mNStream.Write(buff,0,buff.Length)
                if (message.IsBodyHtml) then
                    buff = 'Content-Type: text/html; charset="iso-8859-1"'+CRLF
                else
                    buff = 'Content-Type: text/plain; charset="iso-8859-1"'+CRLF
                mNStream.Write(buff,0,buff.Length)
            end
            buff = "Content-Transfer-Encoding: quoted-printable"+CRLF
            mNStream.Write(buff,0,buff.Length)
            mNStream.Write(CRLF,0,2)

            buff = message.Body+CRLF
            mNStream.Write(buff,0,buff.Length)

            for ctr from 1 thru message.Attachments.Count
            begin
                mNStream.Write(CRLF,0,2)
                buff = '--_NextPart_'+%hex(%jbno)+CRLF
                mNStream.Write(buff,0,buff.Length)
                buff = 'Content-Type: '+message.Attachments[ctr-1].ContentType.ToString()+CRLF
                mNStream.Write(buff,0,buff.Length)
                buff = 'Content-Disposition: '+message.Attachments[ctr-1].ContentDisposition.DispositionType+CRLF
                mNStream.Write(buff,0,buff.Length)
                buff = 'Content-Transfer-Encoding:'
                using message.Attachments[ctr-1].TransferEncoding select
                (TransferEncoding.Base64),
                    buff = String.Concat(buff,' base64')
                (TransferEncoding.QuotedPrintable),
                    buff = String.Concat(buff,' quoted-printable')
                (),
                    buff = String.Concat(buff,' 7bit')
                endusing
                buff = buff + CRLF
                mNStream.Write(buff,0,buff.Length)
                mNStream.Write(CRLF,0,2)
                repeat
                begin
                    m_data_len = ((FileStream)message.Attachments[ctr-1].ContentStream).Read(m_data,0,^size(m_data))
                    ;; Check for EndOfFile condition
                    if (!m_data_len)
                        exitloop
                    using message.Attachments[ctr-1].TransferEncoding select
                    (TransferEncoding.Base64),
                    begin
                        data m_convString    ,string
                        m_convString = Convert.ToBase64String(AsciiEncoding.GetBytes(m_data(1:m_data_len)),
                        &   SynPSG.Base64FormattingOptions.InsertLineBreaks)
                        mNStream.Write(m_convString,0,m_convString.Length)
                    end
                    (),
                        mNStream.Write(m_data,0,m_data_len)
                    endusing
                    if (!m_data_len)
                        exitloop
                end
            end

            if (message.Attachments.Count>0) then
            begin
                mNStream.Write(CRLF,0,2)
                buff = '--_NextPart_'+%hex(%jbno)+"--"+CRLF+"."+CRLF
            end
            else
                buff = "."+CRLF
            mNStream.Write(buff,0,buff.Length)

            getSmtpLine()
            checkResponseCode(250)

            mreturn
        endmethod

        ;;;<summary>
        ;;;Sends an e-mail message to an SMTP server for delivery using the supplied string arguments.
        ;;;</summary>
        public method Send, void
            in from     ,string
            in to       ,string
            in subject  ,string
            in body     ,string
            endparams
        proc
            this.Send(new MailMessage(from,to,subject,body))
        endmethod

        private method getSmtpLine, void
            endparams

        stack record vars
            lineBuf     ,a1024
            byteCount   ,i4
        endrecord

        proc
            init lineBuf,byteCount

            ;; Read one byte at a time from the stream, so that we can identify
            ;; when a LineFeed has been passed
            while ((mByte=mNStream.ReadByte())!=(-1) && %char(mByte)!=LF)
                lineBuf(byteCount+=1:1)=%char(mByte)

            ;; remove trailing CR (if present)
            if(byteCount>0 && lineBuf(byteCount:1)==CR)
                byteCount -= 1

            try
            begin
                mRespCode = %integer(lineBuf(1:3))
                if(lineBuf(4:1)==' ') then
                    mRespContinuation = false
                else
                    mRespContinuation = true
                mRespStr = lineBuf(5,byteCount)
            end
            catch (ex)
            begin
                mRespCode = 999
                mRespContinuation = false
                if(byteCount>0) then
                    mRespStr = lineBuf(1,byteCount)
                else
                    mRespStr = ''
            end
            endtry

            mreturn
        endmethod

        private method checkResponseCode,void
            req in Code1                ,integer    ;; expected response
            endparams
        proc
            mErrMsg = ""

            if (Code1 && mRespCode==Code1)
                mreturn ;; ok - got expected response

            using mRespCode select
            (100 thru 199),
                mreturn ;; ok preliminary reply
            (200 thru 299),
                mreturn ;; ok completion reply
            (300 thru 399),
                mreturn ;; ok intermeditate reply
            (421),
                if (mRespStr.Length>0) then
                    mErrMsg = mRespStr
                else
                    mErrMsg = "Domain Service not available"
            (450),
                mErrMsg = "Requested mail action not taken: mailbox unavailable"
            (451),
                mErrMsg = "Requested action aborted: local error in processing"
            (452),
                mErrMsg = "Requested action not taken: insufficient system storage"
            (500),
                mErrMsg = "Syntax error, command unrecognized."
            (501),
                mErrMsg = "Syntax error in paramaters or arguments."
            (502),
                mErrMsg = "Command not implemented"
            (503),
                mErrMsg = "Bad sequence of commands"
            (504),
                mErrMsg = "Command paramater not implemented."
            (521),
                if (mRespStr.Length>0) then
                    mErrMsg = mRespStr
                else
                    mErrMsg = "Domain does not accept mail."
            (530),
                mErrMsg = "Access denied"
            (550),
                mErrMsg = "Requested action not taken: mailbox unavailable"
            (551),
                if (mRespStr.Length>0) then
                    mErrMsg = mRespStr
                else
                    mErrMsg = "User not local."
            (552),
                mErrMsg = "Requested mail action aborted: exceeded storage allocation"
            (553),
                mErrMsg = "Requested action not taken: mailbox name not allowed"
            (554),
                mErrMsg = "Transaction failed"
            (560),
                mErrMsg = "Must issue STARTTLS command first"
            (),
                mErrMsg = "Invalid orUnknown SMTP response "+%string(mRespCode)
            endusing

            if (mErrMsg.Length)
            begin
                mNStream.Close()
                throw new ApplicationException(mErrMsg)
            end

            mreturn

        endmethod

    endclass

endnamespace
